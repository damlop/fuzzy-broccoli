/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.peliculas.Alquileres;

import com.mycompany.peliculas.Alquileres.PeliculaRentada;
import com.mycompany.peliculas.Clientes.Cliente;
import com.mycompany.peliculas.PanelMain;
import com.mycompany.peliculas.Peliculas.PanelPeliculas;
import com.mycompany.peliculas.Peliculas.Pelicula;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;



/**
 *
 * @author Lei
 */
public class PanelAlquileres extends javax.swing.JFrame {

    /**
     * Creates new form PanelAlquileres
     */
    List<Integer> indiceAlquileres = new ArrayList();
    List<PeliculaRentada> listaAlquileres = new ArrayList();
    List<Pelicula> listaPeliculas = new ArrayList();
    List<Cliente> listaClientes = new ArrayList();
    
    private boolean modificar = false;
    private boolean secondList = false;
    
    public PanelAlquileres() {
        initComponents();
        llenar();
        llenarClientes();
        llenarPeliculas();
    }
    private String rentaToString(PeliculaRentada pelicula){
        return pelicula.getId() + ";" + pelicula.getNombre() + ";" + pelicula.getIdCliente() + ";" + pelicula.getFechaPedida();
    }
    
    private PeliculaRentada StringToRenta(String string){
       String[] partes = string.split(";");
       PeliculaRentada pelicula = new PeliculaRentada(Integer.parseInt(partes[0]), partes[1], Integer.parseInt(partes[2]), partes[3]);
       return pelicula;
    }
     private void llenar(){
        /*
        PeliculaRentada peli = new PeliculaRentada(1, "Hachiko", 859, "20/02/21");
        PeliculaRentada peli1 = new PeliculaRentada(1, "Hachiko", 987, "12/01/21");
        PeliculaRentada peli2 = new PeliculaRentada(2, "Matilda", 859, "15/02/21");
        PeliculaRentada peli3 = new PeliculaRentada(2, "Matilda", 987, "10/01/21");
        
        lista.add(peli);
        lista.add(peli1);
        lista.add(peli2);
        lista.add(peli3);
        */
        
        try {
            String buffer;
            BufferedReader reader = new BufferedReader(new FileReader("rentadas.txt"));
            while((buffer = reader.readLine()) != null){
                listaAlquileres.add(StringToRenta(buffer));
            }
        } catch (IOException ex) {
            Logger.getLogger(PanelPeliculas.class.getName()).log(Level.SEVERE, null, ex);
        }
        actualizarAlquiladas(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listAlquileres = new javax.swing.JList<>();
        tglId = new javax.swing.JToggleButton();
        tglNombre = new javax.swing.JToggleButton();
        tglFecha = new javax.swing.JToggleButton();
        btnMostrar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscarPeli = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnBuscarCliente = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        listUsuarios = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        listPeliculas = new javax.swing.JList<>();
        btnRentar = new javax.swing.JButton();

        jLabel3.setText("IDcliente:");

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jLabel8.setText("Fecha rentada: ");

        jLabel1.setText("ID:");

        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre:");

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listAlquileres.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        listAlquileres.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                listAlquileresFocusGained(evt);
            }
        });
        listAlquileres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listAlquileresMouseClicked(evt);
            }
        });
        listAlquileres.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listAlquileresValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listAlquileres);

        tglId.setText("ID");
        tglId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglIdActionPerformed(evt);
            }
        });

        tglNombre.setText("Nombre");
        tglNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglNombreActionPerformed(evt);
            }
        });

        tglFecha.setText("Fecha rentada");
        tglFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglFechaActionPerformed(evt);
            }
        });

        btnMostrar.setText("Info");
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscarPeli.setText("Buscar peli");
        btnBuscarPeli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPeliActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnBuscarCliente.setText("Buscar cliente");
        btnBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClienteActionPerformed(evt);
            }
        });

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        listUsuarios.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listUsuarios);

        jTabbedPane1.addTab("Usuarios", jScrollPane2);

        listPeliculas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(listPeliculas);

        jTabbedPane1.addTab("Peliculas", jScrollPane3);

        btnRentar.setText("Rentar");
        btnRentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRentarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMostrar)
                            .addComponent(tglId))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tglNombre)
                                .addGap(45, 45, 45)
                                .addComponent(tglFecha))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnBuscarPeli, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                    .addComponent(btnBuscarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                    .addComponent(btnRegresar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(btnEliminar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRentar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tglId)
                    .addComponent(tglNombre)
                    .addComponent(tglFecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane1)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnBuscarPeli)
                    .addComponent(btnMostrar)
                    .addComponent(btnRentar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarCliente)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegresar)
                    .addComponent(btnSalir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private String clientToString(Cliente cliente){
        return cliente.getIdCliente() + ";" + cliente.getNombreApellido() + ";" + cliente.getDireccion()
                 + ";" + cliente.getDni();
    }
    
    private Cliente StringToClient(String string){
       String[] partes = string.split(";");
       Cliente cliente = new Cliente(Integer.parseInt(partes[0]), partes[1], partes[2], Integer.parseInt(partes[3]));
       return cliente;
    }
    private void llenarClientes(){
            /*
        Cliente cliente = new Cliente(1563, "Martin Gomez","San Martin 4219", 42150225);
        Cliente cliente2 = new Cliente(1539, "Fernanda Ludueña", "Moncalvo 8624", 25368741);
        Cliente cliente3 = new Cliente(1534, "Lucas Platner", "Antartida Argentina 2563", 42705369);
        Cliente cliente4 = new Cliente(1587, "Luna Clara", "Rafael Carrillo 1389", 42150125);
        
        lista.add(cliente);
        lista.add(cliente2);
        lista.add(cliente3);
        lista.add(cliente4);
            */
      
       try {
            String buffer;
            BufferedReader reader = new BufferedReader(new FileReader("clientes.txt"));
            DefaultListModel dato = new DefaultListModel();
            Cliente cliente = new Cliente();
            
            while((buffer = reader.readLine()) != null){
                cliente = StringToClient(buffer);
                dato.addElement(cliente.toString());
                listaClientes.add(cliente);
            }
            this.listUsuarios.setModel(dato);
            this.listUsuarios.clearSelection();
        } catch (IOException ex) {
            Logger.getLogger(PanelPeliculas.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
    }
        
    private String peliToString(Pelicula pelicula){
        return pelicula.getId() + ";" + pelicula.getStock() + ";" + pelicula.getNombre() + ";" 
                + pelicula.getAutor() + ";" + pelicula.getPaisDeOrigen() + ";" + pelicula.getDuracion()
                + ";" + pelicula.getGenero();
    }
    private Pelicula StringToPeli(String string){
       String[] partes = string.split(";");
       Pelicula pelicula = new Pelicula(Integer.parseInt(partes[0]), Integer.parseInt(partes[1]), partes[2], partes[3], partes[4], Integer.parseInt(partes[5]), partes[6]);
       return pelicula;
    }
    private void llenarPeliculas(){
        /*
        Pelicula pelicula  = new Pelicula(001, "Hachiko", 10);
        Pelicula pelicula1 = new Pelicula(002, "Star Wars", 15);
        Pelicula pelicula2 = new Pelicula(003, "Que paso ayer", 05);
        Pelicula pelicula3 = new Pelicula(004, "Lo que el agua se llevo", 05);
        Pelicula pelicula4 = new Pelicula(005, "Indiana Jones", 10);

       
        lista.add(pelicula);
        lista.add(pelicula1);
        lista.add(pelicula2);
        lista.add(pelicula3);
        lista.add(pelicula4);
        */
        try {
            DefaultListModel dato = new DefaultListModel();
            String buffer;
            Pelicula pelicula = new Pelicula();
            BufferedReader reader = new BufferedReader(new FileReader("peliculas.txt"));
            while((buffer = reader.readLine()) != null){
                pelicula = StringToPeli(buffer);
                listaPeliculas.add(pelicula);
                dato.addElement(pelicula.toString());
                  
            }
            this.listPeliculas.setModel(dato);
            this.listPeliculas.clearSelection();
        } catch (IOException ex) {
            Logger.getLogger(PanelPeliculas.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
    }
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        
        int i = listAlquileres.getSelectedIndex();
        PeliculaRentada pelicula = new PeliculaRentada();
        pelicula.setNombre(this.txtNombre.getText());
        pelicula.setId(Integer.parseInt(this.txtID.getText()));
        pelicula.setFechaPedida(this.txtFecha.getText());
        pelicula.setIdCliente(Integer.parseInt(txtCliente.getText()));
        if(secondList){
            int j = indiceAlquileres.get(i);
            if(modificar){
                
                listaAlquileres.set(j, pelicula);
                modificar = false;
            }else{
                listaAlquileres.add(pelicula);
            }
           
        }else{
            if(modificar){
                listaAlquileres.set(i, pelicula);
                modificar = false;
            }else{
                listaAlquileres.add(pelicula);
            }
        }
        actualizarAlquiladas(null);
        limpiarTexto();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void listAlquileresFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_listAlquileresFocusGained
        
        PeliculaRentada pelicula = new PeliculaRentada();
        int i = this.listAlquileres.getSelectedIndex();
        
        if(this.secondList){     
            int j = this.indiceAlquileres.get(i);
            pelicula = listaAlquileres.get(j);
        }else{
            pelicula = listaAlquileres.get(i);
        }
        
        this.txtCliente.setText(Integer.toString(pelicula.getIdCliente()));
        this.txtFecha.setText(pelicula.getFechaPedida());
        this.txtNombre.setText(pelicula.getNombre());
        this.txtID.setText(Integer.toString(pelicula.getId()));

        modificar = true;
        
    }//GEN-LAST:event_listAlquileresFocusGained

    private void listAlquileresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listAlquileresMouseClicked
        
        PeliculaRentada pelicula = new PeliculaRentada();
        int i = this.listAlquileres.getSelectedIndex();
        
        if(this.secondList){     
            int j = this.indiceAlquileres.get(i);
            pelicula = listaAlquileres.get(j);
        }else{
            pelicula = listaAlquileres.get(i);
        }
        
        this.txtCliente.setText(Integer.toString(pelicula.getIdCliente()));
        this.txtFecha.setText(pelicula.getFechaPedida());
        this.txtNombre.setText(pelicula.getNombre());
        this.txtID.setText(Integer.toString(pelicula.getId()));

        modificar = true;
    }//GEN-LAST:event_listAlquileresMouseClicked

    private void listAlquileresValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listAlquileresValueChanged

    }//GEN-LAST:event_listAlquileresValueChanged

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private void tglIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglIdActionPerformed
        int i = 0;
        boolean cambio = true;
        PeliculaRentada cliente = new PeliculaRentada();
        while(i < listaAlquileres.size()-1 && cambio) {
            cambio = false;
            for (int j = 0; j < listaAlquileres.size()-1-i; j++) {
                if(listaAlquileres.get(j).getIdCliente() > listaAlquileres.get(j+1).getIdCliente()){
                    cliente = listaAlquileres.get(j);
                    listaAlquileres.set(j, listaAlquileres.get(j+1));
                    listaAlquileres.set(j+1, cliente);
                    cambio = true;
                }

            }
            i++;
        }
                if(secondList){
            actualizarAlquiladas(indiceAlquileres);
        }else{
            actualizarAlquiladas(null);
        }
    }//GEN-LAST:event_tglIdActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void tglNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglNombreActionPerformed
        int i = 0;
        boolean cambio = true;
        PeliculaRentada cliente = new PeliculaRentada();
        while(i < listaAlquileres.size()-1 && cambio) {
            cambio = false;
            for (int j = 0; j < listaAlquileres.size()-1-i; j++) {
                if(listaAlquileres.get(j).getNombre().compareTo(listaAlquileres.get(j+1).getNombre()) > 0){
                    cliente = listaAlquileres.get(j);
                    listaAlquileres.set(j, listaAlquileres.get(j+1));
                    listaAlquileres.set(j+1, cliente);
                    cambio = true;
                }
            }
            i++;
        }
        if(secondList){
            actualizarAlquiladas(indiceAlquileres);
        }else{
            actualizarAlquiladas(null);
        }
    }//GEN-LAST:event_tglNombreActionPerformed

    private void tglFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglFechaActionPerformed
        int i = 0;
        boolean cambio = true;
        PeliculaRentada pelicula = new PeliculaRentada();
        while(i < listaAlquileres.size()-1 && cambio) {
            cambio = false;
            for (int j = 0; j < listaAlquileres.size()-1-i; j++) {
                if(listaAlquileres.get(j).getFechaPedida().equalsIgnoreCase(listaAlquileres.get(1+j).getFechaPedida())){
                    pelicula = listaAlquileres.get(j);
                    listaAlquileres.set(j, listaAlquileres.get(j+1));
                    listaAlquileres.set(j+1, pelicula);
                    cambio = true;
                }
            }
            i++;
        }
               if(secondList){
            actualizarAlquiladas(indiceAlquileres);
        }else{
            actualizarAlquiladas(null);
        }
    }//GEN-LAST:event_tglFechaActionPerformed

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        int i = listAlquileres.getSelectedIndex();
        if(i == -1){
            JOptionPane.showMessageDialog(rootPane, "Seleccione una pelicula");
        }else{
            
           if(secondList){
                i = indiceAlquileres.get(i);
            }
            
            PeliculaRentada pelicula = listaAlquileres.get(i);
            JOptionPane.showMessageDialog(rootPane, "Nombre : " + pelicula.getNombre() +
                "\nID : " +  pelicula.getId()+
                "\nID Cliente : " + pelicula.getIdCliente() +
                "\nFecha pedida : " + pelicula.getFechaPedida());
        }
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarTexto();

    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int i = listAlquileres.getSelectedIndex();
        String titulo;
        if(secondList){
            int j = indiceAlquileres.get(i);
            titulo = listaAlquileres.get(j).getNombre();
            listaAlquileres.remove(j);
            indiceAlquileres.remove(i);
            actualizarAlquiladas(indiceAlquileres);
        }else{
            titulo = listaAlquileres.get(i).getNombre();
            listaAlquileres.remove(i);
            actualizarAlquiladas(null);
        }  
        
        i = 0;
        while(!titulo.equalsIgnoreCase(listaPeliculas.get(i).getNombre())){
            i ++;
        }
        listaPeliculas.get(i).addStock();
        
        actualizarPeliculas();
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarPeliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPeliActionPerformed
        String nombre = (JOptionPane.showInputDialog(rootPane, "Nombre: "));
        int i = 0;
        this.indiceAlquileres.clear();
        while(i < listaAlquileres.size()){
            if(nombre.equalsIgnoreCase(listaAlquileres.get(i).getNombre())){
                indiceAlquileres.add(i);
            }
                i++;
        }
        
        if(this.indiceAlquileres.size() > 0){
            secondList = true;
            actualizarAlquiladas(indiceAlquileres);    
        }else{
            JOptionPane.showMessageDialog(rootPane, "Pelicula no encontrada en alquileres");
        }
        
    }//GEN-LAST:event_btnBuscarPeliActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        actualizarTxtAlquileres();
        actualizarTxtPeliculas();
        PanelMain volver = new PanelMain();
        volver.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClienteActionPerformed
        int nombre = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "ID: "));
        int i = 0;
        this.indiceAlquileres.clear();
        while(i < listaAlquileres.size()){
            if(nombre == listaAlquileres.get(i).getIdCliente()){
                indiceAlquileres.add(i);
            }
                i++;
        }
        
        if(this.indiceAlquileres.size() > 0){
            secondList = true;
            actualizarAlquiladas(indiceAlquileres);       
        }else{
            JOptionPane.showMessageDialog(rootPane, "El cliente no tiene alquileres vigentes.");
        }
    }//GEN-LAST:event_btnBuscarClienteActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        limpiarTexto();
        secondList = false;
        actualizarAlquiladas(null);
        
        
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnRentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRentarActionPerformed
        
        int i = listUsuarios.getSelectedIndex();
        int j = listPeliculas.getSelectedIndex();
        if(i != -1 && j != -1){
        Calendar c1 = Calendar.getInstance();
        String fecha = c1.get(Calendar.DAY_OF_MONTH) + "/" 
                        + (c1.get(Calendar.MONTH)+1) + "/" + c1.get(Calendar.YEAR); 

        Pelicula pelicula = listaPeliculas.get(j);
        pelicula.restStock();
        listaPeliculas.set(j, pelicula);
        
        PeliculaRentada alquiler = new PeliculaRentada(pelicula.getId(), pelicula.getNombre(), listaClientes.get(i).getIdCliente(), fecha);
        listaAlquileres.add(alquiler);
        
        actualizarAlquiladas(null);
        actualizarPeliculas();
        
        }else if(i == -1){
            JOptionPane.showMessageDialog(rootPane, "Seleccione un usuario.");
        }else{
            JOptionPane.showMessageDialog(rootPane, "Seleccione una pelicula.");
        }
    }//GEN-LAST:event_btnRentarActionPerformed
    
    
    private void actualizarAlquiladas(List<Integer> indiceAct){
        DefaultListModel dato = new DefaultListModel();
        PeliculaRentada pelicula = new PeliculaRentada();
        if(indiceAct == null){
            for (int i = 0; i < listaAlquileres.size(); i++) {  
                pelicula = listaAlquileres.get(i);
                dato.addElement(pelicula.toString());
            }
        }else{
            for (int i = 0; i < indiceAct.size(); i++) {                
                pelicula = listaAlquileres.get(indiceAct.get(i));
                dato.addElement(pelicula.toString());
            }
        }
        this.listAlquileres.setModel(dato);
        listAlquileres.clearSelection();
    }
    private void actualizarPeliculas(){
        DefaultListModel dato = new DefaultListModel();
        Pelicula pelicula = new Pelicula();
        
        for (int i = 0; i < listaPeliculas.size(); i++) {  
            pelicula = listaPeliculas.get(i);
            
            if(pelicula.getStock() > 0){dato.addElement(pelicula.toString());}
        }
        
        this.listPeliculas.setModel(dato);
        listPeliculas.clearSelection();
    }
    
    
    private void limpiarTexto(){
        this.txtNombre.setText(null);
        this.txtCliente.setText(null);
        this.txtFecha.setText(null);
        this.txtID.setText(null);
        
    }
    
    private void actualizarTxtAlquileres(){       
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("rentadas.txt"));
            for (int i = 0; i < listaAlquileres.size(); i++) {  
                writer.write(rentaToString(listaAlquileres.get(i))+ "\n");
            }
                writer.close();
            
        } catch (IOException ex) {
            Logger.getLogger(PanelPeliculas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void actualizarTxtPeliculas(){       
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("peliculas.txt"));
            for (int i = 0; i < listaPeliculas.size(); i++) {  
                writer.write(peliToString(listaPeliculas.get(i))+ "\n");
            }
                writer.close();
            
        } catch (IOException ex) {
            Logger.getLogger(PanelPeliculas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelAlquileres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelAlquileres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelAlquileres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelAlquileres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelAlquileres().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarCliente;
    private javax.swing.JButton btnBuscarPeli;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JToggleButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnRentar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> listAlquileres;
    private javax.swing.JList<String> listPeliculas;
    private javax.swing.JList<String> listUsuarios;
    private javax.swing.JToggleButton tglFecha;
    private javax.swing.JToggleButton tglId;
    private javax.swing.JToggleButton tglNombre;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
